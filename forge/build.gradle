plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "libertyvillagers-common.mixins.json"
        mixinConfig "libertyvillagers.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Cloth config, required for auto config.
    modImplementation("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

version = "${project.mod_version}+forge+${project.minecraft_version}"

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

unifiedPublishing {
    project {
        gameVersions = [ rootProject.curseforge_versions ]
        gameLoaders = ["forge"]
        changelog = file('..\\changelog.md').text
        releaseType = "beta"

        relations {
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
            includes {} // Mark as an included dependency
            conflicts {} // Mark as a conflicted dependency
        }

        mainPublication remapJar // Declares the publicated jar

        var cfToken = System.getenv("CURSE_KEY")
        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = rootProject.curseforge_id // Required, must be a string, ID of CurseForge project
            }
        }

        var mrToken = System.getenv("MODRINTH_TOKEN")
        if (mrToken != null) {
            modrinth {
                token = mrToken
                id = rootProject.modrinth_id // Required, must be a string, ID of Modrinth project
            }
        }
    }
}