plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id("me.shedaniel.unified-publishing") version("0.1.+")
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    // Autoconfig.
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }

    // Server translations.
    maven { url 'https://maven.nucleoid.xyz' }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Mod menu.
    modImplementation("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") {
        exclude module: 'fabric-api' // includes bad Fabric API
    }

    // Cloth config, required for auto config.
    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // Server translations. Without this text can't translate on the server for VillagerStats.
    modImplementation include("xyz.nucleoid:server-translations-api:$project.server_translations_version") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

version = "${project.mod_version}+fabric+${project.minecraft_version}"

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}


shadowJar {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}


remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

unifiedPublishing {
    project {
        gameVersions = [ rootProject.curseforge_versions ]
        gameLoaders = ["fabric"]
        changelog = file('..\\changelog.md').text
        releaseType = "beta"

        relations {
            depends { // Mark as a required dependency
                curseforge = "fabric-api" // Optional, project slug
                modrinth = "fabric-api" // Optional, project slug or id
            }
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
            includes {} // Mark as an included dependency
            optional {
                curseforge = "server-translations"
            } // Mark as an optional dependency
            optional {
                curseforge = "modmenu"
                modrinth = "modmenu"
            }
            conflicts {} // Mark as a conflicted dependency
        }

        mainPublication remapJar // Declares the publicated jar

        var cfToken = System.getenv("CURSE_KEY")
        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = rootProject.curseforge_id // Required, must be a string, ID of CurseForge project
            }
        }

        var mrToken = System.getenv("MODRINTH_TOKEN")
        if (mrToken != null) {
            modrinth {
                token = mrToken
                id = rootProject.modrinth_id // Required, must be a string, ID of Modrinth project
            }
        }
    }
}
