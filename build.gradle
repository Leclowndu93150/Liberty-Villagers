//file:noinspection UnnecessaryQualifiedReference
//file:noinspection GroovyMissingReturnStatement
plugins {
    id 'dev.architectury.loom' version '1.11-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id "me.shedaniel.unified-publishing" version "0.1.+"
    id "com.github.breadmoirai.github-release" version "2.4.1"
    id 'org.ajoberstar.grgit' version  "5.2.0" // '3.1.1'
    //id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.73.0'
}

//apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/utilities.gradle'
//apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/changelog.
// gradle'

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "me.shedaniel.unified-publishing"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        //mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings_version}:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        // Autoconfig.
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }
        maven { url "https://maven.architectury.dev/" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

task buildAll {
    dependsOn project("fabric").tasks.getByName("build")
    dependsOn project("forge").tasks.getByName("build")
}

task unifiedRelease {
    dependsOn buildAll
    dependsOn githubRelease
    if (subprojects.any { it.name == "forge" }) {
        dependsOn project("forge").tasks.getByName("publishUnified")
    }
    if (subprojects.any { it.name == "fabric" }) {
        dependsOn project("fabric").tasks.getByName("publishUnified")
    }
}

githubRelease {
    token System.getenv("GITHUB_TOKEN") ?: ""
    owner "gitsh01"
    tagName = project.version + "+" + project.minecraft_version
    releaseName = project.version + "+" + project.minecraft_version
    targetCommitish = { grgit.branch.current().name }
    generateReleaseNotes true // Generate release notes automatically, if true and body is present, body will be
    // prepended, if name is not given, one will be generated by the tag
    draft true // by default this is true
    prerelease false // by default this is false
    FilenameFilter filter = { dir, filename -> filename.contains(project.version) && !filename.contains('-dev-shadow.' +
            'jar') }
    releaseAssets = { new File("fabric/build/libs").listFiles(filter) + new File("forge/build/libs").listFiles(filter) }
    overwrite true
}

/*
task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = file("changelog.md")
    fromRepo = file(".")
    prependToFile = true
    fromRef = "1.0.9+fabric+${project.minecraft_version}"
    toRef = "${project.mod_version}+fabric+${project.minecraft_version}"
    templateContent = """
{{#tags}}
{{#ifEquals name "Unreleased"}}
{{else}}

## [{{name}}](https://gitlab.com/html-validate/html-validate/compare/{{name}}) ({{tagDate .}})

  {{#ifContainsType commits type='feat'}}
### Features

    {{#commits}}
      {{#ifCommitType . type='feat'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://gitlab.com/html-validate/html-validate/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}

  {{#ifContainsType commits type='fix'}}
### Bug Fixes

    {{#commits}}
      {{#ifCommitType . type='fix'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://gitlab.com/html-validate/html-validate/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}

{{/ifEquals}}
{{/tags}}
 """
}

 */